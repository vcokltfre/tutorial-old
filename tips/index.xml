<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>discord.py tips on discord.py Bot Tutorial</title><link>https://tutorial-old.vcokltfre.dev/tips/</link><description>Recent content in discord.py tips on discord.py Bot Tutorial</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 18 Feb 2021 20:05:28 +0000</lastBuildDate><atom:link href="https://tutorial-old.vcokltfre.dev/tips/index.xml" rel="self" type="application/rss+xml"/><item><title>Allowed Mentions</title><link>https://tutorial-old.vcokltfre.dev/tips/mentions/</link><pubDate>Thu, 18 Feb 2021 20:05:28 +0000</pubDate><guid>https://tutorial-old.vcokltfre.dev/tips/mentions/</guid><description>In this bonus section I'll cover the Discord feature of allowed mentions.
First, what are allowed mentions? Allowed mentions are a way of telling Discord that you don't want to ping for certain mentions in your message. The different types of ping a message can have are @role pings, @everyone or @here pings, @user pings, and reply pings, all of which we can turn on and off pings for when mentioning.</description></item><item><title>Blocking Calls</title><link>https://tutorial-old.vcokltfre.dev/tips/blocking/</link><pubDate>Thu, 18 Feb 2021 20:05:28 +0000</pubDate><guid>https://tutorial-old.vcokltfre.dev/tips/blocking/</guid><description>What is async? In Python we have a library called asyncio which allows the running of multiple tasks and coroutines simultaneously (or at least, the appearance of being simultaneous, but that's outside of the scope of this tutorial). Where traditionally you can only run one piece of code at a time, asyncio makes it so that you can have multiple running at once, and uses context switching to jump between the currently in-progress functions.</description></item><item><title>Client vs Bot</title><link>https://tutorial-old.vcokltfre.dev/tips/clientbot/</link><pubDate>Thu, 18 Feb 2021 20:05:28 +0000</pubDate><guid>https://tutorial-old.vcokltfre.dev/tips/clientbot/</guid><description>I often see a lot of people using the wrong one, so here's a guide for which you should use.
discord.Client The Client class is made specifically to connect to the gateway and handle API requests. As such it's not suitable for the majority of bot applications, and using commands.Bot is preferable since it will handle command parsing, permssion checks, etc for you.
discord.ext.commands.Bot The Bot class is designed specifically for you to create functional bots with.</description></item><item><title>Gateway Intents</title><link>https://tutorial-old.vcokltfre.dev/tips/intents/</link><pubDate>Thu, 18 Feb 2021 20:05:28 +0000</pubDate><guid>https://tutorial-old.vcokltfre.dev/tips/intents/</guid><description>Intents are an important part of Discord which I briefly cover in this tutorial part, but which deserve their own section explaining them in more depth, so here it is!
1 - What are Gateway Intents? Gateway intents are a way of getting only the data your application needs from the Discord gateway. When you first identify with the gateway upon starting your bot you send the intents you are going to use as an integer which represents a field of bits that describe which intents you need.</description></item><item><title>Storing Data</title><link>https://tutorial-old.vcokltfre.dev/tips/storage/</link><pubDate>Thu, 18 Feb 2021 20:05:28 +0000</pubDate><guid>https://tutorial-old.vcokltfre.dev/tips/storage/</guid><description>As your bot grows in features you'll probably want to store persistent data, and it's important to do this in the correct way, else you can make your life developing harder, and possibly compromise the functionality of your bot.
If you have one takeaway from this, let it be that JSON is not a database, and does not work as one, nor does CSV, or plain text files. JSON works well as a data transfer format, or for config files, but is not made for storing changeable persistent data.</description></item><item><title>Tokens</title><link>https://tutorial-old.vcokltfre.dev/tips/tokens/</link><pubDate>Thu, 18 Feb 2021 20:05:28 +0000</pubDate><guid>https://tutorial-old.vcokltfre.dev/tips/tokens/</guid><description>In this bonus section I'll explain the 3 most common methods of storing credentials and tokens, while this is focused on discord.py everything after this paragraph applies generally to any secret you want to store. Note that for these examples you should assume that there is a bot defined somewhere else in the code, and the line bot.run(token) is at the bottom. I won't show the bot code in each example to show just the necessary information, and make this applicable outside of Discord bots too.</description></item><item><title>Transitioning to Cogs</title><link>https://tutorial-old.vcokltfre.dev/tips/cogs/</link><pubDate>Thu, 18 Feb 2021 20:05:28 +0000</pubDate><guid>https://tutorial-old.vcokltfre.dev/tips/cogs/</guid><description>Cogs are a very important part of discord.py, which are discussed in this tutorial part, but that's more of a guide starting from the start, rather than showing how to transfer an existing bot to use cogs, so that's what this bonus part is for!
I'll be using typehinting (e.g def foo(bar: Baz):) throughout this part. Not doing so will not cause any difference to the bot, however it will make it so that there are far less useful code suggestions from your IDE, so generally I'd recommend using it where possible.</description></item></channel></rss>